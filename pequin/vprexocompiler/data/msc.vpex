PREAMBLE

PRE-TiTe

PRE-TeTs

HELPER
#define tv_push(x) tv[tv_sp] = x; tv_sp++;
#define tv_pop(x)  tv_sp--; x = tv[tv_sp];

#define cc_push(x) cc[cc_sp] = x; cc_sp++;
#define cc_pop(x)  cc_sp--; x = cc[cc_sp];

#define tvb_push(x) tvb[tvb_sp] = x; tvb_sp++;
#define tvb_pop(x) tvb_sp--; x = tvb[tvb_sp];

#define stack_push(level, head, next, remn) level_s[sp] = level; head_s[sp] = head; next_s[sp] = next; remn_s[sp] = remn; sp++;
#define stack_pop(level, head, next, remn) sp--; level = level_s[sp]; head = head_s[sp]; next = next_s[sp]; remn = remn_s[sp];

IN
int NV
int NE
arr edgeB MAX_V+1
arr edgeV MAX_E
arr edges MAX_E

OUT
int MSCnum
arr MSC MAX_V

REQ-TiTe

REQ-TeTs

TI
    int MSCnum = -1

    arr rank MAX_V
    arr cc MAX_V
    int cc_sp = 0
    loop k1 MAX_V
        slot(rank, k1).val = 0
    endloop
    arr knar MAX_V+1

    arr tv MAX_V
    int tv_sp = 0
    arr tvb MAX_V
    int tvb_sp = 0

    int sv1count = 0
    int cand = 0
    int in_inner_loop = 0

    buffet 2*MAX_V+MAX_E
    while sv1count < NV
        while slot(rank, cand).val != 0
            cand = cand + 1
        end
        int v = cand
        int nvc = 1
        slot(rank, v).val = 1
        slot(knar, 1).val = v
        cc_push(1)
        tvb_push(0)

        int j = slot( input->edgeB, v+1).val
        while j > slot( input->edgeB, v).val
            j = j - 1
            tv_push( slot( input->edges, j).val )
        end

        while cc_sp > 0
            while tv_sp > slot(tvb, tvb_sp-1).val
                tv_pop(v)
                while slot(rank, v).val > 0 && slot(cc, cc_sp-1).val > slot(rank, v).val
                    cc_sp = cc_sp - 1
                    tvb_sp = tvb_sp - 1
                end
                if slot(rank, v).val == 0
                    in_inner_loop = 1
                    nvc = nvc + 1
                    slot(rank, v).val = nvc
                    slot(knar, nvc).val = v
                    cc_push(nvc)
                    tvb_push(tv_sp)
                    j = slot( input->edgeB, v+1).val
                end
                while in_inner_loop == 1 && j > slot( input->edgeB, v).val
                    j = j - 1
                    tv_push( slot( input->edges, j).val )
                end
                in_inner_loop = 0
            end

            MSCnum = MSCnum + 1
            int tmp = slot(cc, cc_sp-1).val
            while nvc >= tmp
                nvc = nvc - 1
                slot( rank, slot( knar, nvc+1).val ).val = NV + MSCnum
                sv1count = sv1count + 1
            end
            cc_sp = cc_sp - 1
            tvb_sp = tvb_sp - 1
        end
    end

    MSCnum = MSCnum + 1
    arr MSC MAX_V
    loop k2 MAX_V
        if k2 < NV
            slot(MSC, k2).val = slot(rank, k2).val - NV
        end
    endloop

    %exo ghostArr T 2*MAX_V-1
    %exo ghostArr P_remn 2*MAX_V-1
    %exo ghostArr P_recv 2*MAX_V-1
    %exo ghostArr P_outg 2*MAX_V-1
    %exo ghostArr next_T 2*MAX_V-1
    %exo ghostArr E 2*MAX_V-1

TE
    arr level_s MAX_V
    arr head_s MAX_V
    arr next_s MAX_V
    arr remn_s MAX_V
    int sp = 0
    int level = 0

    arr occ MAX_V
    loop k3 MAX_V
        occ[k3] = 0
    endloop


    int head = -1
    int next = -1
    int remn = -1
    int cur_msc = -1

    loop k4 2*MAX_V-1
        if slot(T, k4).val < NV

            if level == 0
                cur_msc = cur_msc + 1
            end
            
            int v_recv = -1
            int v_outg = -1
            int remn_last = -1

            if slot(T, k4).val < 0
                remn_last = remn - slot(P_remn, k4).val - 1
                remn = slot(P_remn, k4).val
                int recv = slot(P_recv, k4).val
                int outg = slot(P_outg, k4).val
                assert_zero recv <= k4
                assert_zero outg <= k4
                assert_zero recv > k4 + remn
                assert_zero outg > k4 + remn
                v_recv = slot(T, recv).val
                v_outg = slot(T, outg).val
            else
                int v = slot(T, k4).val
                assert_zero slot( output->MSC, v).val - cur_msc
                slot(occ, v).val = 1
                v_recv = v
                v_outg = v
                remn = remn - 1
            end

            if level != 0
                if head == -1
                    head = v_recv
                end
                if next != -1
                    assert_zero v_recv - next
                end
                if slot(next_T, k4).val == NV
                    next = head
                    assert_zero remn_last
                else
                    next = slot(next_T, k4).val
                end
                int e = slot(E, k4).val
                assert_zero e < 0
                assert_zero e >= NE
                assert_zero slot( input->edgeV, e).val - v_outg
                assert_zero slot( input->edges, e).val - next
            end
            
            if slot(T, k4).val < 0
                if remn_last != 0
                    stack_push(level, head, next, remn_last)
                end
                level = level + 1
                head = -1
                next = -1
            end
         
            if level != 0 && remn == 0
                stack_pop(level, head, next, remn)
            end
        end
    endloop

    assert_zero level
    int count = 0
    loop k5 MAX_V
        if k5 < NV && slot(occ, k5) == 1
            count = count + 1
        end
    endloop
    assert_zero count


    output->MSCnum = cur_msc + 1
    cur_msc = slot( output->MSC, 0).val
    int i = 0
    int j = 0
    int ebi0 = slot( input->edgeB, 0).val
    int ebi1 = slot( input->edgeB, 1).val
    loop k6 MAX_E+MAX_V
        if i < NV
            if j == ebi1
                i = i + 1
                cur_msc = slot( output->MSC, i).val
                ebi0 = ebi1
                if i < NV
                    ebi1 = slot( input->edgeB, i+1).val
                end
            else
                assert_zero slot( output->MSC, slot( input->edges, j).val ).val > cur_msc
                j = j + 1
            end
        end
    endloop

TS

INP
