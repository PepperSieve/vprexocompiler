PREAMBLE
#define MAX_N 3
#define MAX_FAC 6

PRE-TiTe
import "IArray.vpr"

PRE-TeTs
import "IArray.vpr"

HELPER

IN
	int n
    arr C MAX_N

OUT
    arr D MAX_N

REQ-TiTe

REQ-TeTs

TI
    ghostArr CC MAX_N
    ghostArr D MAX_N

    loop k1 MAX_N
        if k1 < n
            slot(CC, k1).val = slot( input->C, k1).val
        end
    endloop

    ghostInt i = -1
    int d_i = 0
    int d_j = 0
    loop k2 MAX_N-1
        int tmp = MAX_N - (k2+1) - 1
        if i == -1 && tmp < n - 1
            if slot(CC, tmp).val < slot(CC, tmp+1).val
                i = tmp
                d_i = slot(CC, tmp).val
            end
        end
    endloop

    ghostInt j = -1
    loop k3 MAX_N-1
        int tmp = MAX_N - (k3+1)
        if j == -1 && tmp < n
            if slot(CC, tmp).val > d_i
                j = tmp
                d_j = slot(CC, tmp).val
            end
        end
    endloop

    slot(CC, i).val = d_j
    slot(CC, j).val = d_i

    int cor_ti = -1
    loop k4 MAX_N
        if k4 < n
            if k4 <= i
                cor_ti = k4
            else
                cor_ti = n - k4 + i
            end
            slot( D, k4).val = slot(CC, cor_ti).val
        end
    endloop

    %exo ghostInt ci = d_i
    %exo ghostInt cj = d_j
    %exo ghostInt cip1 = slot( input->C, i+1).val
    %exo ghostInt cjp1 = -1
    %exo if j != n - 1
    %exo     cjp1 = slot( input->C, j+1).val
    %exo end

TE
    loop k5 MAX_N
        if k5 < n && k5 != i && k5 != j
            assert_zero slot(CC, k5).val != slot( input->C, k5).val
        end
    endloop

    assert_zero 0 > i
    assert_zero i >= j
    assert_zero j >= n

    assert_zero ci >= cip1
    assert_zero cj <= ci
    if j != n - 1
        assert_zero cjp1 >= ci
    end

    loop k6 MAX_N-1
        if k6+1 == i
            assert_zero slot( input->C, k6+1).val - ci
            assert_zero slot( CC, k6+1).val - cj
        end
        if k6+1 == i + 1
            assert_zero slot( input->C, k6+1).val - cip1
        end
        if k6+1 == j
            assert_zero slot( input->C, k6+1).val - cj
            assert_zero slot( CC, k6+1).val - ci
        end
        if k6+1 == j + 1 && k6+1 != n
            assert_zero slot( input->C, k6+1).val - cjp1
        end
    endloop

    int cor_te = -1
    loop k7 MAX_N
        if k7 < n
            if k7 <= i
                cor_te = k7
            else
                cor_te = n - k7 + i
            end
            assert_zero slot(D, k7).val != slot(CC, cor_te).val

            if k7 != 0 && k7 - 1 > i
                assert_zero slot( input->C, k7-1).val <= slot( input->C, k7).val
            end
        end
    endloop

TS
    int is_permutation = 0
    arr st MAX_N
    arr cc MAX_N
    loop k8 MAX_N
        slot( st, k8).val = 0
        slot( cc, k8).val = slot( input->C, k8).val
    endloop

    k8 = 1
    loop k9 MAX_FAC*MAX_FAC
        if k8 < n
            if slot( st, k8).val < k8
                if k8 % 2 == 0
                    int tmp = slot( cc, 0).val
                    slot( cc, 0).val = slot( cc, k8).val
                    slot( cc, k8).val = tmp
                end
                if k8 % 2 == 1
                    int tmp = slot(cc, k8).val
                    slot(cc, k8).val = slot( cc, slot( st, k8).val ).val
                    slot( cc, slot( st, k8).val ).val = tmp
                end

                int lte_c = -1
                int ts_j = 0
                loop k10 MAX_N
                    if lte_c == -1 && k10 < n && slot( cc, k10).val == slot( input->C, k10).val
                        ts_j = ts_j + 1
                    else
                        lte_c = 0
                    end
                endloop
                if ts_j == n
                    lte_c = 1
                end
                if ts_j < n && slot( cc, ts_j).val < slot( input->C, ts_j).val
                    lte_c = 1
                end

                int gte_d = -1
                ts_j = 0
                loop k11 MAX_N
                    if gte_d == -1 && k11 < n && slot( cc, k11).val == slot( D, k11).val
                        ts_j = ts_j + 1
                    else
                        gte_d = 0
                    end
                endloop
                if ts_j == n
                    is_permutation = 1
                    gte_d = 1
                end
                if ts_j < n && slot( cc, ts_j).val > slot( D, ts_j).val
                    gte_d = 1
                end

                assert_zero lte_c + gte_d > 1
                slot( st, k8).val = slot( st, k8).val + 1
                k8 = 1
            else
                slot( st, k8).val =  0
                k8 = k8 + 1
            end
        end
    endloop
    assert_zero is_permutation - 1

INP
    int offset = rand() % MAX_N;
    for (int i = 0; i < MAX_N; i++) {
        mpq_set_ui(input_q[(i + offset) % MAX_N], 2 * i + (rand() % 2), 1);
    }
    mpq_set_ui(input_q[MAX_N], rand() % (MAX_N - 1) + 2, 1);

END