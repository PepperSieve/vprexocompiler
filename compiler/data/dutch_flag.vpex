PREAMBLE
#define MAX_N 10

PRE-TiTe
import "IArray.vpr"

PRE-TeTs
import "IArray.vpr"

HELPER
struct item {
  int color;
  int content;
};

IN
int n
arr a_color MAX_N
arr a_content MAX_N

OUT
arr b_color MAX_N
arr b_content MAX_N

REQ-TiTe

REQ-TeTs

TI
    int j = 0
    int k = n - 1
    ghostArr b_color MAX_N
    ghostArr b_content MAX_N
    %exo ghostArr ord_in_A MAX_N
    %exo ghostArr ord_in_B MAX_N
    loop it1 MAX_N
        if it1 < n
            slot( b_color, it1).val = slot( input->a_color, it1).val
            slot( b_content, it1).val = slot( input->a_content, it1).val
            %exo slot( ord_in_A, it1).val = it1
            %exo slot( ord_in_B, it1).val = it1
        end
    endloop
    int i = 0
    loop it2 MAX_N
        if j <= k
            int bj_color = slot( b_color, j).val
            int bj_content = slot( b_content, j).val
            if bj_color == 0
                int tmp_color = slot( b_color, i).val
                int tmp_content = slot( b_content, i).val
                slot( b_color, i).val = bj_color
                slot( b_content, i).val = bj_content
                slot( b_color, j).val = tmp_color
                slot( b_content, j).val = tmp_content
                %exo int tmp_ord = slot( ord_in_A, i).val
                %exo slot( ord_in_A, i).val = slot( ord_in_A, j).val
                %exo slot( ord_in_A, j).val = tmp_ord
                %exo tmp_ord = slot( ord_in_B, slot( ord_in_A, i).val ).val
                %exo slot( ord_in_B, slot( ord_in_A, i).val ).val = slot( ord_in_B, slot( ord_in_A, j).val ).val
                %exo slot( ord_in_B, slot( ord_in_A, j).val ).val = tmp_ord
                i = i + 1
                j = j + 1
            else 
                if bj_color == 2
                    slot( b_color, j).val = slot( b_color, k).val
                    slot( b_content, j).val = slot( b_content, k).val
                    slot( b_color, k).val = bj_color
                    slot( b_content, k).val = bj_content
                    %exo int tmp_ord = slot( ord_in_A, j).val
                    %exo slot( ord_in_A, j).val = slot( ord_in_A, k).val
                    %exo slot( ord_in_A, k).val = tmp_ord
                    %exo tmp_ord = slot( ord_in_B, slot( ord_in_A, j).val ).val
                    %exo slot( ord_in_B, slot( ord_in_A, j).val ).val = slot( ord_in_B, slot( ord_in_A, k).val ).val
                    %exo slot( ord_in_B, slot( ord_in_A, k).val ).val = tmp_ord
                    k = k - 1
                else
                    j = j + 1
                end
            end
        end
    endloop

    %exo ghostInt k1 = i - 1
    %exo ghostInt k2 = j - 1

TE
    assert_zero slot(ord_in_A, 0).val
    assert_zero slot(ord_in_A, 1).val - 1

    int cur_color = 0

    arr count MAX_N
    loop it4 MAX_N
        slot(count, it4).val = 0
    endloop
    assert_zero k1 < -1
    assert_zero k1 > k2
    assert_zero k2 >= n
    assert_zero k1 + 1
    assert_zero k2
    loop it5 MAX_N
        int ord_j = slot(ord_in_A, it5).val
        if it5 - 1 == k1
            cur_color = cur_color + 1
        end
        if it5 - 1 == k2
            cur_color = cur_color + 1
        end
        if it5 < n
            assert_zero ord_j >= n
            slot( count, ord_j).val = 1
            // There is something fishy going on in pequin
            // Verification passes if you uncomment the lines below, but this should be rejected.
            // if ord_j == 0
                // assert_zero slot( count, 0).val
            // end
            
            assert_zero slot( b_color, it5).val != slot( input->a_color, ord_j).val
            assert_zero slot( b_content, it5).val != slot( input->a_content, ord_j).val

            int tmp_color = slot( b_color, it5).val
            assert_zero tmp_color - cur_color
        else
            slot(count, it5).val = 1
        end
    endloop
    loop it6 MAX_N
        // Bug prevents the following line from successful verification
        // assert_zero slot(count, it6).val - 1
    endloop

TS
    loop it7 MAX_N
        if it7 < n
            int tmp_ord = slot( ord_in_A, it7).val
            assert_zero tmp_ord < 0
            assert_zero tmp_ord >= n
            assert_zero slot( b_color, it7).val != slot( input->a_color, tmp_ord).val
            assert_zero slot( b_content, it7).val != slot( input->a_content, tmp_ord).val

            tmp_ord = slot( ord_in_B, it7).val
            assert_zero tmp_ord < 0
            assert_zero tmp_ord >= n
            assert_zero slot( input->a_color, it7).val != slot( b_color, tmp_ord).val
            assert_zero slot( input->a_content, it7).val != slot( b_content, tmp_ord).val
        end

        int tmp_color = slot( b_color, it7).val
        if it7 <= k1
            assert_zero tmp_color
        else
            if it7 <= k2
                assert_zero tmp_color - 1
            else
                if it7 < n
                    assert_zero tmp_color - 2
                end
            end
        end
    endloop        

INP
    for (int i = 0; i < MAX_N; i++) {
        mpq_set_ui(input_q[i], 2 * i + rand() % 2, 1); // content
    }
    mpq_set_ui(input_q[MAX_N], rand() % MAX_N, 1); // n
    for (int i = MAX_N + 1; i < 2 * MAX_N + 1; i++) {
        mpq_set_ui(input_q[i], rand() % 3, 1); // color
    }

END