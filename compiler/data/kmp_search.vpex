PREAMBLE

PRE-TiTe

PRE-TeTs

HELPER

IN
	int M
    int N
    arr PAT MAX_M
    arr TXT MAX_N

OUT
    int ind

REQ-TiTe

REQ-TeTs

TI
    arr lps MAX_M

    int len = 0
    slot(lps, 0).val = 0

    int i = 1
    ghostInt ind = 0
    loop k1 MAX_M*2
        if i < M
            if slot( input->PAT, i).val == slot( input->PAT, len).val
                len = len + 1
                slot(lps, i).val = len
                i = i + 1
            else
                if len != 0
                    len = slot(lps, len-1).val
                else
                    slot( lps, i).val = 0
                    i = i + 1
                end
            end
        end
    endloop

    %exo ghostArr B MAX_N

    i = 0
    int j = 0
    int found = 0
    loop k2 MAX_N*2
        if i < N
            if j < M
                if slot( input->PAT, j).val != slot( input->TXT, i).val
                    if j != 0
                        j = slot(lps, j-1).val
                    else
                        i = i + 1
                    end
                else
                    j = j + 1
                    i = i + 1
                end
            end
            if j == M
                ind = i - M
                found = 1
                i = N + 1
            }
        end
    endloop
    if found == 0
        ind = N
    end

TE
    assert_zero ind > N - M + 1
    loop k3 MAX_N
        if k3 < ind
            int b_i = slot(B, k3).val
            assert_zero b_i >= M
            int t = slot( input->TXT, k3+b_i).val
            int p = slot( input->PAT, b_i).val
            assert_zero t == p
        end
    endloop

    if ind != N - M + 1
        loop k4 MAX_M
            if k4 < M
                int t = slot( input->TXT, ind+k4).val
                int p = slot( input->PAT, k4).val
                assert_zero t != p
            end
        endloop
    else
        ind = N
    end

TS

INP
