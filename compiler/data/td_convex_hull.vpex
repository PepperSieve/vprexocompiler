PREAMBLE
#define MAX_N 10

PRE-TiTe
import "IArray.vpr"
define X_PROD(x1, y1, x2, y2, x3, y3) (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1)

PRE-TeTs
import "IArray.vpr"
define X_PROD(x1, y1, x2, y2, x3, y3) (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1)

HELPER
#define X_PROD(x1, y1, x2, y2, x3, y3) (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1)

IN
int n
arr X MAX_N
arr Y MAX_N

OUT
int ss
arr stack_x MAX_N
arr stack_y MAX_N

REQ-TiTe

REQ-TeTs

TI
    ghostArr stack_x MAX_N
    ghostArr stack_y MAX_N
    int x1 = slot( input->X, 0).val
    slot( stack_x, 0).val = x1
    int y1 = slot( input->Y, 0).val
    slot( stack_y, 0).val = y1
    int x2 = slot( input->X, 1).val
    slot( stack_x, 1).val = x2
    int y2 = slot( input->Y, 1).val
    slot( stack_y, 1).val = y2
    int ss = 2
    int i = 2

    int next_x_ti = slot( input->X, i).val
    int next_y_ti = slot( input->Y, i).val

    %exo ghostArr in_c MAX_N
    %exo slot(in_c, 0).val = 1
    %exo slot(in_c, 1).val = 1

    %exo arr stack_ind MAX_N
    %exo slot( stack_ind, 0).val = 0
    %exo slot( stack_ind, 1).val = 1

    int prod_ti = X_PROD(x1, y1, x2, y2, next_x_ti, next_y_ti)
    slot( stack_x, ss).val = next_x_ti
    slot( stack_y, ss).val = next_y_ti
    %exo slot( stack_ind, ss).val = i
    ss = ss + 1
    x1 = x2
    y1 = y2
    x2 = next_x_ti
    y2 = next_y_ti
    i = i + 1

    buffet 2*MAX_N
    while i < n
        next_x_ti = slot( input->X, i).val
        next_y_ti = slot( input->Y, i).val
        prod_ti = X_PROD(x1, y1, x2, y2, next_x_ti, next_y_ti)
        while prod_ti < 0
            ss = ss - 1
            %exo slot(in_c, slot(stack_ind, ss).val ).val = 0
            x2 = x1
            y2 = y1
            x1 = slot( stack_x, ss-2).val
            y1 = slot( stack_y, ss-2).val
            prod_ti = X_PROD(x1, y1, x2, y2, next_x_ti, next_y_ti)
        end
        slot( stack_x, ss).val = next_x_ti
        slot( stack_y, ss).val = next_y_ti
        %exo slot( stack_ind, ss).val = i
        ss = ss + 1
        x1 = x2
        y1 = y2
        x2 = next_x_ti
        y2 = next_y_ti
        i = i + 1
    end

    %exo ghostArr NX MAX_N
    %exo ghostArr NY MAX_N
    %exo loop k0 MAX_N
        %exo if k0 < ss - 1
            %exo slot(NX, slot( stack_ind, k0).val ).val = slot( input->X, slot( stack_ind, k0+1).val ).val
            %exo slot(NY, slot( stack_ind, k0).val ).val = slot( input->Y, slot( stack_ind, k0+1).val ).val
        %exo end
    %exo endloop
    %exo slot( NX, n-1 ).val = slot( input->X, 0).val
    %exo slot( NY, n-1 ).val = slot( input->Y, 0).val

TE
    int x0_te = slot( input->X, 0).val
    int y0_te = slot( input->Y, 0).val
    int next_x_te = slot(NX, 0).val
    int next_y_te = slot(NY, 0).val
    int last_x_te = x0_te
    int last_y_te = y0_te

    assert_zero x0_te - slot(stack_x, 0).val
    assert_zero y0_te - slot(stack_y, 0).val

    int count_te = 0
    
    loop k1 MAX_N-1
        if k1+1 < n
            int xi = slot( input->X, k1+1).val
            int yi = slot( input->Y, k1+1).val

            if xi == next_x_te
                count_te = count_te + 1
                assert_zero slot(stack_x, count_te).val - xi
                assert_zero slot(stack_y, count_te).val - yi
                assert_zero yi - next_y_te
                next_x_te = slot(NX, k1+1).val
                next_y_te = slot(NY, k1+1).val
                int prod_te = X_PROD(last_x_te, last_y_te, xi, yi, next_x_te, next_y_te)
                // Note: An accurate Convex Hull algorithm requires prod_te to be exactly > 0.
                // However, in practice due to rounding error, we relax the restriction to >= 0 for sample
                // input to work.
                assert_zero prod_te < 0
                last_x_te = xi
                last_y_te = yi
            else
                int prod_te = X_PROD(last_x_te, last_y_te, xi, yi, next_x_te, next_y_te)
                assert_zero prod_te > 0
            end
        end
    endloop

    assert_zero x0_te - next_x_te
    assert_zero y0_te - next_y_te

TS
    int x0_ts = slot( input->X, 0).val
    int y0_ts = slot( input->Y, 0).val

    assert_zero x0_ts - slot(stack_x, 0).val
    assert_zero y0_ts - slot(stack_y, 0).val

    int count_ts = 0;

    loop k2 MAX_N-1
        if k2+1 < n
            int xi = slot( input->X, k2+1).val
            int yi = slot( input->Y, k2+1).val

            int last = k2
            int next = k2 + 2;
            if next == MAX_N
                next = 0
            end

            loop k3 MAX_N
                if slot(in_c, last).val != 1
                    last = last - 1
                end
                if next < n && slot(in_c, next).val != 1
                    next = next + 1
                end
            endloop

            if next == n
                next = 0
            end

            int last_x_ts = slot( input->X, last).val
            int last_y_ts = slot( input->Y, last).val
            int next_x_ts = slot( input->X, next).val
            int next_y_ts = slot( input->Y, next).val
            int prod_ts = X_PROD(last_x_ts, last_y_ts, xi, yi, next_x_ts, next_y_ts)

            if slot(in_c, k2+1).val == 1
                count_ts = count_ts + 1
                assert_zero slot(stack_x, count_ts).val - xi
                assert_zero slot(stack_y, count_ts).val - yi
                // Note: An accurate Convex Hull algorithm requires prod_te to be exactly > 0.
                // However, in practice due to rounding error, we relax the restriction to >= 0 for sample
                // input to work.
                assert_zero prod_ts < 0
            else
                assert_zero prod_ts > 0
            end
        end
    endloop

    int ss = count_ts + 1

INP
    mpq_set_ui(input_q[0], rand() % MAX_N, 1);
    int y_diff = rand() % MAX_N;
    int x_diff = pow(4, MAX_N + 1);
    int y_offset = 0;
    int x_offset = 0;
    for (int i = 1; i <= MAX_N; i++) {
        mpq_set_ui(input_q[i], y_offset, 1); // Y
        y_offset += y_diff;
    }
    for (int i = MAX_N + 1; i <= 1 * MAX_N; i++) {
        mpq_set_ui(input_q[i], x_offset, 1); // X
        x_offset += x_diff;
        x_diff /= 2;
    }

END