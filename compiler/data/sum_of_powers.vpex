PREAMBLE
#define MAX_R 20
#define MAX_K 4

PRE-TiTe
import "IArray.vpr"
function pow(x: Int, k: Int): Int
    requires k >= 0
    ensures x >= 0 ==> pow(x, k) >= 0
    ensures x > 0 ==> pow(x, k) > 0
    ensures x == 0 ==> pow(x, k) == 0
    ensures x < 0 && k % 2 == 0 ==> pow(x, k) > 0
    ensures x < 0 && k % 2 == 1 ==> pow(x, k) < 0
{
    k == 0 ? 1 : k == 1 ? x : x * pow(x, k-1)
}

PRE-TeTs
import "IArray.vpr"
function pow(x: Int, k: Int): Int
    requires k >= 0
    ensures x >= 0 ==> pow(x, k) >= 0
    ensures x > 0 ==> pow(x, k) > 0
    ensures x == 0 ==> pow(x, k) == 0
    ensures x < 0 && k % 2 == 0 ==> pow(x, k) > 0
    ensures x < 0 && k % 2 == 1 ==> pow(x, k) < 0
{
    k == 0 ? 1 : k == 1 ? x : x * pow(x, k-1)
}

HELPER
int pow(int x, int k) {
    int y = 1;
    int tmp;
    for (tmp = 0; tmp < MAX_K; tmp++) {
        if (k > 0) {
            y *= x;
            k--;
        }
    }
    return y;
}

IN
	int r
    int k

OUT
    arr x MAX_R+1
    arr y MAX_R+1
    int out_size

REQ-TiTe

REQ-TeTs

TI
    int cur_x = 0
    int cur_y = 0
    ghostArr x MAX_R+1
    ghostArr y MAX_R+1
    %exo ghostArr cor_y MAX_R+1

    loop k1 MAX_R
        if pow(cur_x, k) + pow(cur_x, k) < r 
            cur_x = cur_x + 1
            cur_x = cur_x + 1
        end
    endloop
    %exo ghostInt x1 = cur_x
    int i = 0
    loop tmp2 2*(MAX_R+1)
        if pow(cur_x, k) <= r
            if pow(cur_x, k) + pow(cur_y, k) > r 
                cur_y = cur_y - 1
            else
                %exo slot(cor_y, cur_x-x1).val = cur_y
                if pow(cur_x, k) + pow(cur_y, k) == r
                    slot(x, i).val = cur_x
                    slot(y, i).val = cur_y
                    i = i + 1
                    cur_x = cur_x + 1
                else
                    cur_x = cur_x + 1
                end
            end
        end
    endloop
    %exo ghostInt x2 = cur_x - 1
    ghostInt out_size = i

TE
    assert_zero x1 < 0
    if x1 != 0
        assert_zero 2 * pow(x1 - 1, k) >= r
    end
    assert_zero 2 * pow(x1, k) < r
    assert_zero pow(x2, k) > r
    assert_zero pow(x2 + 1, k) <= r

    int count_te = 0
    loop j MAX_R+1
        if x1 + j <= x2
            int tmp1_te = pow(x1 + j, k)
            int tmp2_te = pow( slot(cor_y, j).val , k)

            assert_zero tmp1_te + tmp2_te > r
            assert_zero tmp1_te + pow( slot(cor_y, j).val + 1, k) <= r

            if tmp1_te + tmp2_te == r
                assert_zero slot(x, count_te).val != x1 + j
                assert_zero slot(y, count_te).val != slot(cor_y, j).val
                count_te = count_te + 1
            end
        end
    endloop
    assert_zero out_size - count_te

TS
    int count_ts = 0
    loop k2 MAX_R+1
        if k2 <= r
            loop k3 MAX_R+1
                if k3 <= k2
                    int tmp1_ts = pow(k2, k)
                    int tmp2_ts = pow(k3, k)

                    if tmp1_ts + tmp2_ts == r
                        assert_zero slot( output->x, count_ts).val - k2
                        assert_zero slot( output->y, count_ts).val - k3
                        count_ts = count_ts + 1
                    end
                end
            endloop
        end
    endloop
    assert_zero out_size - count_ts

INP
