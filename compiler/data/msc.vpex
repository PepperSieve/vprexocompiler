PREAMBLE
#define MAX_V 5
#define MAX_E 10
#define MAX_EXP 32

PRE-TiTe
import "IArray.vpr"

PRE-TeTs
import "IArray.vpr"

HELPER
struct T_struct {
    int val;
    int remn;
    int outg;
    int recv;
    int next;
    int edge;
};

// Append everything in cur_comp to T
int chain_to_T(struct T_struct* T_ptr, int T_sp, int comps[MAX_V * MAX_V], int comps_E[MAX_V * MAX_V], int comps_outg[MAX_V], int comps_sp, int comps_ind[MAX_V], int cur_comp) {
    int T_head = T_sp;
    T_ptr[T_head].val = -1;
    T_sp++;
    int i;
    for (i = 0; i < comps_ind[cur_comp]; i++) {
        int target = comps[cur_comp * MAX_V + i];
        int next = i == comps_ind[cur_comp] - 1 ? comps[cur_comp * MAX_V] : comps[cur_comp * MAX_V + i + 1];
        if (target >= 0) {
            T_ptr[T_sp].val = target;
            T_ptr[T_sp].edge = comps_E[cur_comp * MAX_V + i];
            T_ptr[T_sp].next = next;
            T_sp++;
        } else {
            T_sp = chain_to_T(T_ptr, T_sp, comps, comps_E, comps_outg, comps_sp, comps_ind, -1 * target);
        }
    }
    T_ptr[T_head].remn = T_sp - T_head - 1;
    T_ptr[T_head].recv = T_head + 1;
    T_ptr[T_head].outg = T_head + comps_outg[cur_comp] + 1;
    return T_sp;
}

IN
int NV
int NE
arr edgeB MAX_V+1
arr edgeV MAX_E
arr edges MAX_E

OUT
int MSCnum
arr MSC MAX_V

REQ-TiTe

REQ-TeTs

TI
    ghostInt MSCnum = -1

    arr rank MAX_V
    arr cc MAX_V
    int cc_sp = 0
    loop k1 MAX_V
        slot(rank, k1).val = 0
    endloop
    arr knar MAX_V+1

    arr tv MAX_V
    int tv_sp = 0
    arr tvb MAX_V
    int tvb_sp = 0

    int sv1count = 0
    int cand = 0
    int in_inner_loop = 0

    %exo %c struct T_struct* T_ptr  = malloc(MAX_EXP * sizeof(struct T_struct));
    %exo int T_sp = 0

    %exo // Use comps to record all the cycles we have detected. Leave entry 0 empty
    %exo // comps has size **comps_sp + 1**, each entry X has size comps_ind[X]
    %exo mat comps MAX_V MAX_V
    %exo int comps_sp = 0
    %exo arr comps_ind MAX_V
    %exo // Use reverse_comps to figure out which comp each vertex belongs to, -1 if DNE
    %exo arr rev_comps MAX_V
    %exo loop EXO_IT0 MAX_V
        %exo slot(rev_comps, EXO_IT0).val = -1
    %exo end
    %exo // Use chain to record the current chain of processed comps
    %exo // A positive value X refers to vertex X, a negative value -X refers to the cycle at entry X of comps
    %exo arr chain MAX_V
    %exo int chain_sp = 0
    %exo // Use tv_E, chain_E, and comps_E to show what edges are used to construct chains and comps
    %exo arr tv_E MAX_V
    %exo arr chain_E MAX_V
    %exo mat comps_E MAX_V MAX_V
    %exo // Use comps_outg to record the INDEX of the outgoing node within the comp
    %exo arr comps_outg MAX_V

    buffet 2*MAX_V+MAX_E
    while sv1count < NV
        while slot(rank, cand).val != 0
            cand = cand + 1
        end
        int v = cand
        int nvc = 1
        slot(rank, v).val = 1
        slot(knar, 1).val = v
        slot( cc, cc_sp).val = 1
        cc_sp = cc_sp + 1
        slot( tvb, tvb_sp).val = 0
        tvb_sp = tvb_sp + 1

        %exo chain_sp = 0
        %exo slot(chain, chain_sp).val = v
        %exo chain_sp = chain_sp + 1

        int j = slot( input->edgeB, v+1).val
        while j > slot( input->edgeB, v).val
            j = j - 1
            slot( tv, tv_sp).val = slot( input->edges, j).val
            %exo slot( tv_E, tv_sp).val = j
            tv_sp = tv_sp + 1
        end

        while cc_sp > 0
            while tv_sp > slot(tvb, tvb_sp-1).val
                // pop(tv)
                tv_sp = tv_sp - 1
                v = slot( tv, tv_sp).val

                %exo if slot(rank, v).val > 0 && slot(cc, cc_sp-1).val > slot(rank, v).val
                    %exo int e = slot( tv_E, tv_sp).val
                    %exo slot(chain_E, chain_sp-1).val = e
                    %exo comps_sp = comps_sp + 1
                    
                    %exo // push TARGET and everything after TARGET in chain onto a new comp
                    %exo int target = v
                    %exo if slot(rev_comps, v).val != -1
                        %exo target = -1 * slot(rev_comps, v).val
                    %exo end
                    %exo int target_ind = chain_sp - 1
                    %exo while slot(chain, target_ind).val != target
                        %exo target_ind = target_ind - 1
                    %exo end
                    %exo slot(comps_ind, comps_sp).val = chain_sp - target_ind
                    %exo while chain_sp > target_ind
                        %exo chain_sp = chain_sp - 1
                        %exo mat_slot( comps, comps_sp, MAX_V, chain_sp-target_ind ).val = slot(chain, chain_sp).val
                        %exo mat_slot( comps_E, comps_sp, MAX_V, chain_sp-target_ind ).val = slot(chain_E, chain_sp).val
                        %exo if slot(chain, chain_sp).val == v
                            %exo slot( comps_outg, comps_sp).val = chain_sp-target_ind
                        %exo end
                    %exo end
                    
                    %exo // replace everything with the comp index
                    %exo slot(chain, chain_sp).val = -1 * comps_sp
                    %exo chain_sp = chain_sp + 1

                    %exo // set rev_comps[v] to comps_sp
                    %exo slot(rev_comps, v).val = comps_sp
                %exo end
                while slot(rank, v).val > 0 && slot(cc, cc_sp-1).val > slot(rank, v).val
                    cc_sp = cc_sp - 1
                    tvb_sp = tvb_sp - 1
                end
                if slot(rank, v).val == 0
                    %exo int e = slot( tv_E, tv_sp).val
                    %exo slot(chain_E, chain_sp-1).val = e
                    in_inner_loop = 1
                    nvc = nvc + 1
                    slot(rank, v).val = nvc
                    slot(knar, nvc).val = v
                    slot( cc, cc_sp).val = nvc
                    cc_sp = cc_sp + 1
                    slot( tvb, tvb_sp).val = tv_sp
                    tvb_sp = tvb_sp + 1
                    j = slot( input->edgeB, v+1).val
                    
                    %exo slot(chain, chain_sp).val = v
                    %exo chain_sp = chain_sp + 1
                end
                while in_inner_loop == 1 && j > slot( input->edgeB, v).val
                    j = j - 1
                    slot( tv, tv_sp).val = slot( input->edges, j).val
                    %exo slot( tv_E, tv_sp).val = j
                    tv_sp = tv_sp + 1
                end
                in_inner_loop = 0
            end

            MSCnum = MSCnum + 1
            int tmp = slot(cc, cc_sp-1).val
            while nvc >= tmp
                nvc = nvc - 1
                slot( rank, slot( knar, nvc+1).val ).val = NV + MSCnum
                sv1count = sv1count + 1
            end
            %exo // pop the last element in the chain out
            %exo chain_sp = chain_sp - 1
            %exo int target_chain = slot(chain, chain_sp).val
            %exo if target_chain >= 0
                %exo %c T_ptr[T_sp].val = target_chain;
                %exo %c T_ptr[T_sp].edge = slot(chain_E, chain_sp);
                %exo T_sp = T_sp + 1
            %exo else
                %exo %c T_sp = chain_to_T(T_ptr, T_sp, comps, comps_E, comps_outg, comps_sp, comps_ind, -1 * target_chain);
            %exo end
            cc_sp = cc_sp - 1
            tvb_sp = tvb_sp - 1
        end
    end

    MSCnum = MSCnum + 1
    ghostArr MSC MAX_V
    loop k2 MAX_V
        if k2 < NV
            slot(MSC, k2).val = slot(rank, k2).val - NV
        end
    endloop

    %exo ghostArr T MAX_EXP
    %exo ghostArr P_remn 2*MAX_V-1
    %exo ghostArr P_recv 2*MAX_V-1
    %exo ghostArr P_outg 2*MAX_V-1
    %exo ghostArr next_T 2*MAX_V-1
    %exo ghostArr E MAX_EXP
    %exo ghostArr cycl MAX_EXP
    %exo loop EXO_IT1 MAX_EXP
        %exo if EXO_IT1 < T_sp
            %exo %c T[EXO_IT1] = T_ptr[EXO_IT1].val;
            %exo %c E[EXO_IT1] = T_ptr[EXO_IT1].edge;
            %exo %c P_remn[EXO_IT1] = T_ptr[EXO_IT1].remn;
            %exo %c P_recv[EXO_IT1] = T_ptr[EXO_IT1].recv;
            %exo %c P_outg[EXO_IT1] = T_ptr[EXO_IT1].outg;
            %exo %c next_T[EXO_IT1] = T_ptr[EXO_IT1].next;
        %exo else
            %exo slot(T, EXO_IT1).val = NV
        %exo end
    %exo endloop

TE
    arr level_s MAX_V
    arr head_s MAX_V
    arr next_s MAX_V
    arr remn_s MAX_V
    int sp = 0
    int level = 0

    arr occ_te MAX_V
    loop k3 MAX_V
        slot( occ_te, k3).val = 0
    endloop


    int head = -1
    int next = -1
    int remn = -1
    int cur_msc_te = -1

    loop k4 2*MAX_V-1
        if slot(T, k4).val < NV

            if level == 0
                cur_msc_te = cur_msc_te + 1
            end
            
            int v_recv = -1
            int v_outg = -1
            int remn_last = -1

            if slot(T, k4).val < 0
                remn_last = remn - slot(P_remn, k4).val - 1
                remn = slot(P_remn, k4).val
                int recv = slot(P_recv, k4).val
                int outg = slot(P_outg, k4).val
                assert_zero recv <= k4
                assert_zero outg <= k4
                assert_zero recv > k4 + remn
                assert_zero outg > k4 + remn
                v_recv = slot(T, recv).val
                v_outg = slot(T, outg).val
            else
                int v = slot(T, k4).val
                assert_zero slot( MSC, v).val - cur_msc_te
                // Bug prevents the following line from successful verification
                // slot(occ_te, v).val = 1
                v_recv = v
                v_outg = v
                remn = remn - 1
            end

            if level != 0
                if head == -1
                    head = v_recv
                end
                if next != -1
                    assert_zero v_recv - next
                end
                if slot(next_T, k4).val == NV
                    next = head
                    assert_zero remn_last
                else
                    next = slot(next_T, k4).val
                end
                int e_te = slot(E, k4).val
                assert_zero e_te < 0
                assert_zero e_te >= NE
                assert_zero slot( input->edgeV, e_te).val - v_outg
                assert_zero slot( input->edges, e_te).val - next
            end
            
            if slot(T, k4).val < 0
                if remn_last != 0
                    slot( level_s, sp).val = level
                    slot( head_s, sp).val = head
                    slot( next_s, sp).val = next
                    slot( remn_s, sp).val = remn_last
                    sp = sp + 1
                end
                level = level + 1
                head = -1
                next = -1
            end
         
            if level != 0 && remn == 0
                sp = sp - 1
                level = slot( level_s, sp).val
                head = slot( head_s, sp).val
                next = slot( next_s, sp).val
                remn = slot( remn_s, sp).val
            end
        end
    endloop

    assert_zero level
    int count_te = 0
    loop k5 MAX_V
        if k5 < NV && slot(occ_te, k5).val != 0
            count_te = count_te + 1
        end
    endloop
    assert_zero count_te

    assert_zero MSCnum - cur_msc_te - 1
    cur_msc_te = slot( MSC, 0).val
    int i_te = 0
    int j_te = 0
    int ebi0_te = slot( input->edgeB, 0).val
    int ebi1_te = slot( input->edgeB, 1).val
    loop k6 MAX_E+MAX_V
        if i_te < NV
            if j_te == ebi1_te
                i_te = i_te + 1
                cur_msc_te = slot( MSC, i_te).val
                ebi0_te = ebi1_te
                if i_te < NV
                    ebi1_te = slot( input->edgeB, i_te+1).val
                end
            else
                assert_zero slot( MSC, slot( input->edges, j_te).val ).val > cur_msc_te
                j_te = j_te + 1
            end
        end
    endloop

TS

    arr occ_ts MAX_V
    loop k7 MAX_V
        slot( occ_ts, k7).val = 0
    endloop

    int cur_msc_ts = 0
    int cur_head = slot( T, 0).val
    assert_zero slot( MSC, 0).val
    assert_zero slot( input->edgeV, 0).val
    int e_ts = slot( E, 0).val
    assert_zero e_ts < 0
    assert_zero e_ts >= NE
    assert_zero slot( input->edgeV, e_ts).val - cur_head

    loop k8 MAX_EXP-1
        if cur_msc_ts < MSCnum
            int v = slot( T, k8+1).val
            slot( occ_ts, v).val = 1

            if slot( cycl, k8+1).val == 0
                cur_msc_ts = cur_msc_ts + 1
                assert_zero slot( input->edges, e_ts).val - cur_head
                cur_head = v
            else
                assert_zero slot( input->edges, e_ts).val - v
            end
            e_ts = slot( E, v).val
            assert_zero e_ts < 0
            assert_zero e_ts >= NE
            if cur_msc_ts != MSCnum
                assert_zero slot( input->edgeV, e_ts).val - v
            end
        end
    endloop

    int count_ts = 0
    loop k9 MAX_V
        if k9 < NV && slot(occ_ts, k9).val == 1
            count_ts = count_ts + 1
        end
    endloop
    assert_zero count_ts

    MSCnum = cur_msc_ts + 1
    cur_msc_ts = slot( MSC, 0).val
    int i_ts = 0
    int j_ts = 0
    int ebi0_ts = slot( input->edgeB, 0).val
    int ebi1_ts = slot( input->edgeB, 1).val
    loop k10 MAX_E+MAX_V
        if i_ts < NV
            if j_ts == ebi1_ts
                i_ts = i_ts + 1
                cur_msc_ts = slot( MSC, i_ts).val
                ebi0_ts = ebi1_ts
                if i_ts < NV
                    ebi1_ts = slot( input->edgeB, i_ts+1).val
                end
            else
                assert_zero slot( MSC, slot( input->edges, j_ts).val ).val > cur_msc_ts
                j_ts = j_ts + 1
            end
        end
    endloop

INP
    // I can't think of a good way to randomize input, so I'm going to manually write one
    int NV = 4;
    int NE = 5;
    int edgeB[MAX_V + 1] = {0, 2, 3, 4, 5, 5};
    int edgeV[MAX_E] = {0, 0, 1, 2, 3, -1, -1, -1, -1, -1};
    int edges[MAX_E] = {1, 3, 3, 0, 0, -1, -1, -1, -1, -1};

    // NV and NE
    mpq_set_ui(input_q[MAX_V + MAX_E + 1], NV, 1);
    mpq_set_ui(input_q[MAX_V + 2 * MAX_E + 2], NE, 1);

    // edgeB    
    for (int i = 0; i <= MAX_V; i++) {
        mpq_set_ui(input_q[MAX_E + i], edgeB[i], 1);
    }

    // edgeV and edges
    for (int i = 0; i < MAX_E; i++) {
        mpq_set_ui(input_q[MAX_E + MAX_V + 2 + i], edgeV[i], 1);
        mpq_set_ui(input_q[i], edges[i], 1);
    }

END