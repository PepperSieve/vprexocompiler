UFLAG on

PREAMBLE
#define MAX_N 10
#define M 4

PRE-TiTe
import "IArray.vpr"
function f(j: Int, s: Int): Int
    ensures s < result
    ensures forall t: Int :: {f(j, t)} s < t ==> result < f(j, t)

PRE-TeTs
import "IArray.vpr"
function f(j: Int, s: Int): Int
    ensures s < result
    ensures forall t: Int :: {f(j, t)} s < t ==> result < f(j, t)

HELPER
#define f(i, x) (2 * i + 3) * x

IN
	int seq_0
    int n

OUT
    arr seq MAX_N

REQ-TiTe

REQ-TeTs

TI
    arr x M
    arr i M
    ghostArr seq MAX_N

    %exo ghostArr prev_k MAX_N
    %exo ghostArr prev_j MAX_N
    %exo ghostMat fseq M MAX_N

    slot(seq, 0).val = seq_0
    loop k1 M
        slot(i, k1).val = 0
        slot(x, k1).val = f(k1, slot(seq, 0).val )
    endloop

    loop count MAX_N-1
        if count+1 < n

            slot(seq, count+1).val = slot(x, 0).val
            loop k2 M
                if slot(x, k2).val < slot(seq, count+1).val
                    slot(seq, count+1).val = slot(x, k2).val
                end
            endloop

            loop k3 M
                if slot(x, k3).val == slot(seq, count+1).val
                    slot(i, k3).val = slot(i, k3).val + 1
                    slot(x, k3).val = f(k3, slot(seq, slot(i, k3).val ).val );
                end
            endloop
        end
    endloop
    %exo ghostInt seq_last = slot(seq, n-1).val

TE
    int cur_seq_te = slot(seq, 0).val
    assert_zero cur_seq_te != seq_0
    loop k4 M
        assert_zero mat_slot( fseq, MAX_N, k4, 0 ).val < 0
        if mat_slot( fseq, MAX_N, k4, 0 ).val >= n
            assert_zero f(k4, cur_seq_te) <= seq_last
        else
            assert_zero slot(seq, mat_slot( fseq, MAX_N, k4, 0 ).val ).val != f(k4, cur_seq_te)
        end
    endloop

    loop k MAX_N-1
        if k+1 < n
            cur_seq_te = slot(seq, k+1).val
            if k+1 == n - 1
                assert_zero cur_seq_te != seq_last
            end
            assert_zero slot(seq, k+1-1 ).val >= cur_seq_te
            assert_zero slot(prev_k, k+1).val < 0
            assert_zero slot(prev_k, k+1).val >= k+1
            int prev = slot( seq, slot( prev_k, k+1).val ).val

            int prev_count = 0
            loop k5 M
                if f(k5, prev) == cur_seq_te
                    prev_count = prev_count + 1
                end
                assert_zero mat_slot( fseq, MAX_N, k5, k+1 ).val < 0

                if mat_slot( fseq, MAX_N, k5, k+1 ).val >= n
                    assert_zero f(k5, cur_seq_te) <= seq_last
                else
                    assert_zero slot(seq, mat_slot( fseq, MAX_N, k5, k+1 ).val ).val != f(k5, cur_seq_te)
                end
            endloop

            assert_zero prev_count == 0
        end
    endloop

TS
    int cur_seq_ts = slot(seq, 0).val
    assert_zero cur_seq_ts != seq_0

    loop k6 MAX_N-1
        if k6 + 1 < n
            cur_seq_ts = slot( seq, k6+1).val
            int pk = slot( prev_k, k6+1).val
            int pj = slot( prev_j, k6+1).val
            int seq_pk = slot( seq, pk).val

            assert_zero pk < 0
            assert_zero pk >= k6
            assert_zero pj < 0
            assert_zero pj >= M
            assert_zero f(pj, seq_pk) - cur_seq_ts

            loop k7 M
                loop k8 MAX_N
                    if k8 < k6
                        int fjk8 = f(k7, slot( seq, k8).val )
                        assert_zero fjk8 > slot(seq, k6-1).val && fjk8 < cur_seq_ts
                    end
                endloop
            endloop
        end
    endloop

INP
