// For this example, I create a special type of array called dutch_array that has two identifiers:
// col: Should only be 0, 1, and 2.
// val: Any integer. The same val should not appear twice in the array.

import "IArray.vpr"

field col: Int

define unsorted_dutch_flag(a, n)
    n < len(a) &&
    // verify that color is legal
    (forall j: Int :: {slot(a, j).col} 
        0 <= j && j < n ==> slot(a, j).col >= 0 && slot(a, j).col <= 2) &&
    // verify that value is unique
    (forall i: Int, j: Int :: {slot(a, i).val, slot(a, j).val}
        0 <= i && i < j && j < n ==> slot(a, i).val != slot(a, j).val)

define sorted_dutch_flag(a, b, n)
    unsorted_dutch_flag(a, n) && contents(a) == contents(b) &&
    (forall i: Int, j: Int :: {slot(a, i), slot(b, j)}
        0 <= i && i < n && 0 <= j && j < n && slot(a, i).val == slot(b, j).val ==> slot(a, i).col == slot(b, j).col) &&
    (forall i: Int, j: Int :: {slot(b, i).col, slot(b, j).col}
        0 <= i && i < j && j < n ==> slot(b, i).col <= slot(b, j).col)

define access_dutch(array)
    forall j: Int :: {slot(array, j)}
        0 <= j && j < len(array) ==> acc(slot(array, j).col) && acc(slot(array, j).val)

define access_read_dutch(array)
    forall j: Int :: {slot(array, j)} 
        0 <= j && j < len(array) ==> acc(slot(array, j).col, 2/3) && acc(slot(array, j).val, 2/3)

method dutch_flag(n: Int, a: IArray, b: IArray)
    requires access_read_dutch(a) && access_dutch(b)
    requires n > 0 && n < maxsize() && len(a) == maxsize() && len(b) == maxsize()
    requires unsorted_dutch_flag(a, n)
    ensures access_read_dutch(a) && access_dutch(b)
{
    var ord: IArray
    inhale access(ord)
    assume ord != a && ord != b
    assume len(ord) == maxsize()
    var inv_ord: IArray
    inhale access(inv_ord)
    assume inv_ord != a && inv_ord != b && inv_ord != ord
    assume len(inv_ord) == maxsize()
    // --
    // Start of T_I
    var i: Int
    var j: Int := 0
    var k: Int := n - 1
    var tmp_val: Int
    var tmp_col: Int
    var tmp_ord: Int
    var tmp_set: Set[Int]
    var tmp_set_1: Set[Int]
    var tmp_set_2: Set[Int]
    var color: Int
    var it: Int
    i := 0
    while (i < maxsize())
        invariant access_read_dutch(a) && access_dutch(b) && access(ord) && access(inv_ord)
        invariant unsorted_dutch_flag(a, n)
        invariant i >= 0
        invariant forall p: Int :: {slot(b, p)}
            0 <= p && p < (i < n ? i : n) ==>
                slot(b, p).val == slot(a, p).val &&
                slot(b, p).col == slot(a, p).col
        invariant forall p: Int :: {slot(ord, p)}
            0 <= p && p < (i < n ? i : n) ==>
                slot(ord, p).val == p
        invariant forall p: Int :: {slot(inv_ord, p)}
            0 <= p && p < (i < n ? i : n) ==>
                slot(inv_ord, p).val == p
    {
        if (i < n) {
            slot(b, i).val := slot(a, i).val
            slot(b, i).col := slot(a, i).col
            slot(ord, i).val := i
            slot(inv_ord, i).val := i
        }
        i := i + 1
    }
    i := 0
    var bj_val: Int
    var bj_col: Int
    it := 0
    while (it < maxsize())
        invariant access_read_dutch(a) && access_dutch(b) && access(ord) && access(inv_ord)
        invariant unsorted_dutch_flag(a, n) && unsorted_dutch_flag(b, n)
        invariant it >= 0
        invariant 0 <= i && i <= j && k < n && j <= n
        
        // Loop bound
        invariant k - j >= -1
        invariant n >= it ==> k - j < n - it
        invariant n <= it ==> k - j < 0

        // Permutation
        invariant forall p: Int :: {slot(ord, p).val}
            0 <= p && p < n ==>
                0 <= slot(ord, p).val && slot(ord, p).val < n
        invariant distinct_up_to(ord, n)
        invariant forall p: Int :: {slot(ord, p).val}
            0 <= p && p < n ==>
                slot(b, p).val == slot(a, slot(ord, p).val).val &&
                slot(b, p).col == slot(a, slot(ord, p).val).col
        invariant forall p: Int :: {slot(inv_ord, p).val}
            0 <= p && p < n ==>
                0 <= slot(inv_ord, p).val && slot(inv_ord, p).val < n
        invariant distinct_up_to(inv_ord, n)
        invariant forall p: Int :: {slot(ord, p).val}
            0 <= p && p < n ==>
                slot(inv_ord, slot(ord, p).val).val == p
        invariant forall p: Int, q: Int ::
            0 <= p && p < n && 0 <= q && q < n && q != p ==>
                slot(inv_ord, slot(ord, q).val).val != p
        invariant forall p: Int :: {slot(inv_ord, p).val}
            0 <= p && p < n ==>
                slot(ord, slot(inv_ord, p).val).val == p

        // Coloring
        invariant forall p: Int :: {slot(b, p).col}
            0 <= p && p < i && p < n ==> slot(b, p).col == 0
        invariant forall p: Int :: {slot(b, p).col}
            i <= p && p < j && p < n ==> slot(b, p).col == 1
        invariant forall p: Int :: {slot(b, p).col}
            0 <= p && k < p && p < n ==> slot(b, p).col == 2
    {
        if (j <= k) {
            bj_val := slot(b, j).val
            bj_col := slot(b, j).col
            color := bj_col
            if (color == 0) {
                tmp_val := slot(b, i).val
                tmp_col := slot(b, i).col
                slot(b, i).val := bj_val
                slot(b, i).col := bj_col
                slot(b, j).val := tmp_val
                slot(b, j).col := tmp_col
                tmp_ord := slot(ord, i).val
                slot(ord, i).val := slot(ord, j).val
                slot(ord, j).val := tmp_ord
                assert forall p: Int :: {slot(inv_ord, p).val}
                    0 <= p && p < n && slot(inv_ord, p).val != i && slot(inv_ord, p).val != j ==>
                        slot(ord, slot(inv_ord, p).val).val == p
                assert forall p: Int :: {slot(inv_ord, p).val}
                    0 <= p && p < n && p != slot(ord, i).val && p != slot(ord, j).val ==>
                        slot(inv_ord, p).val != i && slot(inv_ord, p).val != j &&
                        slot(ord, slot(inv_ord, p).val).val == p
                assert slot(ord, slot(inv_ord, slot(ord, i).val).val).val == slot(ord, j).val
                assert slot(ord, slot(inv_ord, slot(ord, j).val).val).val == slot(ord, i).val
                tmp_ord := slot(inv_ord, slot(ord, i).val).val
                slot(inv_ord, slot(ord, i).val).val := slot(inv_ord, slot(ord, j).val).val
                slot(inv_ord, slot(ord, j).val).val := tmp_ord
                i := i + 1
                j := j + 1
            } else {
                if (color == 2) {
                    tmp_val := bj_val
                    tmp_col := bj_col
                    slot(b, j).val := slot(b, k).val
                    slot(b, j).col := slot(b, k).col
                    slot(b, k).val := tmp_val
                    slot(b, k).col := tmp_col
                    tmp_ord := slot(ord, j).val
                    slot(ord, j).val := slot(ord, k).val
                    slot(ord, k).val := tmp_ord
                    assert forall p: Int :: {slot(inv_ord, p).val}
                        0 <= p && p < n && slot(inv_ord, p).val != j && slot(inv_ord, p).val != k ==>
                            slot(ord, slot(inv_ord, p).val).val == p
                    assert forall p: Int :: {slot(inv_ord, p).val}
                        0 <= p && p < n && p != slot(ord, j).val && p != slot(ord, k).val ==>
                            slot(inv_ord, p).val != j && slot(inv_ord, p).val != k &&
                            slot(ord, slot(inv_ord, p).val).val == p
                    assert slot(ord, slot(inv_ord, slot(ord, j).val).val).val == slot(ord, k).val
                    assert slot(ord, slot(inv_ord, slot(ord, k).val).val).val == slot(ord, j).val
                    tmp_ord := slot(inv_ord, slot(ord, j).val).val
                    slot(inv_ord, slot(ord, j).val).val := slot(inv_ord, slot(ord, k).val).val
                    slot(inv_ord, slot(ord, k).val).val := tmp_ord
                    k := k - 1
                } else {
                    j := j + 1
                }
            }
        }
        it := it + 1
    }

    assert n <= it
    assert j - 1 == k
    var k1: Int := i - 1
    var k2: Int := j - 1
    // End of T_I
    // --
    // Start of T_E
    var count: IArray
    inhale access(count)
    assume count != a && count != b && count != ord && count != inv_ord
    assume len(count) == maxsize()
    var cur_col: Int := 0
    // Use count to make sure everything is only used once
    i := 0
    while (i < maxsize())
        invariant access_read_dutch(a) && access_dutch(b) && access(ord) && access(inv_ord) && access(count)
        invariant unsorted_dutch_flag(a, n) && unsorted_dutch_flag(b, n)
        // Permutation
        invariant forall p: Int :: {slot(ord, p).val}
            0 <= p && p < n ==>
                0 <= slot(ord, p).val && slot(ord, p).val < n
        invariant forall p: Int :: {slot(ord, p).val}
            0 <= p && p < n ==>
                slot(b, p).val == slot(a, slot(ord, p).val).val &&
                slot(b, p).col == slot(a, slot(ord, p).val).col
        invariant forall p: Int :: {slot(inv_ord, p).val}
            0 <= p && p < n ==>
                0 <= slot(inv_ord, p).val && slot(inv_ord, p).val < n
        invariant forall p: Int :: {slot(inv_ord, p).val}
            0 <= p && p < n ==>
                slot(ord, slot(inv_ord, p).val).val == p
        // Coloring
        invariant forall p: Int :: {slot(b, p).col}
            0 <= p && p <= k1 && p < n ==> slot(b, p).col == 0
        invariant forall p: Int :: {slot(b, p).col}
            k1 < p && p <= k2 && p < n ==> slot(b, p).col == 1
        invariant forall p: Int :: {slot(b, p).col}
            0 <= p && k2 < p && p < n ==> slot(b, p).col == 2

        invariant i >= 0
        invariant i <= maxsize() ==>
            forall p: Int :: {slot(count, p).val}
                p >= 0 && p < i ==> slot(count, p).val == 0
        invariant i >= maxsize() ==>
            forall p: Int :: {slot(count, p).val}
                p >= 0 && p < maxsize() ==> slot(count, p).val == 0
    {
        slot(count, i).val := 0
        i := i + 1
    }
    assert(k1 >= -1);
    assert(k1 <= k2);
    assert(k2 < n);
    i := 0
    while (i < maxsize())
        invariant access_read_dutch(a) && access_dutch(b) && access(ord) && access(inv_ord) && access(count)
        invariant unsorted_dutch_flag(a, n) && unsorted_dutch_flag(b, n)
        // Permutation
        invariant forall p: Int :: {slot(ord, p).val}
            0 <= p && p < n ==>
                0 <= slot(ord, p).val && slot(ord, p).val < n
        invariant forall p: Int :: {slot(ord, p).val}
            0 <= p && p < n ==>
                slot(b, p).val == slot(a, slot(ord, p).val).val &&
                slot(b, p).col == slot(a, slot(ord, p).val).col
        invariant forall p: Int :: {slot(inv_ord, p).val}
            0 <= p && p < n ==>
                0 <= slot(inv_ord, p).val && slot(inv_ord, p).val < n
        invariant forall p: Int :: {slot(inv_ord, p).val}
            0 <= p && p < n ==>
                slot(ord, slot(inv_ord, p).val).val == p
        // Coloring
        invariant forall p: Int :: {slot(b, p).col}
            0 <= p && p <= k1 ==> slot(b, p).col == 0
        invariant forall p: Int :: {slot(b, p).col}
            k1 < p && p <= k2 ==> slot(b, p).col == 1
        invariant forall p: Int :: {slot(b, p).col}
            k2 < p && p < n ==> slot(b, p).col == 2

        invariant i >= 0
        // cur_col
        invariant cur_col >= 0
        invariant i - 1 <= k1 ==> cur_col == 0
        invariant i - 1 > k1 && i - 1 <= k2 ==> cur_col == 1
        invariant i - 1 > k2 ==> cur_col == 2
        // count
        invariant forall p: Int :: {slot(ord, p).val}
            0 <= p && p < i && p < n ==> slot(count, slot(ord, p).val).val == 1
        invariant forall p: Int :: {slot(count, p).val}
            n <= p && p < i && p < maxsize() ==> slot(count, p).val == 1        
    {
        tmp_ord := slot(ord, i).val
        // We might have no items with color 0 or color 1
        if (i - 1 == k1) {
            cur_col := cur_col + 1
        }
        if (i - 1 == k2) {
            cur_col := cur_col + 1
        }
        if (i < n) {
            assert 0 <= tmp_ord && tmp_ord < n
            // Pigeonhole: if n ORD assigns n COUNT to 1, then every ORD
            // must have assigned a distinct COUNT
            slot(count, tmp_ord).val := 1
            assert slot(b, i).val == slot(a, tmp_ord).val
            assert slot(b, i).col == slot(a, tmp_ord).col
            // Verify color
            tmp_col := slot(b, i).col
            assert tmp_col == cur_col
        } else {
            slot(count, i).val := 1
        }
        i := i + 1
    }
    i := 0
    while (i < maxsize())
        invariant access_read_dutch(a) && access_dutch(b) && access(ord) && access(inv_ord) && access(count)
        // Permutation
        invariant forall p: Int :: {slot(ord, p).val}
            0 <= p && p < n ==>
                0 <= slot(ord, p).val && slot(ord, p).val < n
        invariant forall p: Int :: {slot(ord, p).val}
            0 <= p && p < n ==>
                slot(b, p).val == slot(a, slot(ord, p).val).val &&
                slot(b, p).col == slot(a, slot(ord, p).val).col
        invariant forall p: Int :: {slot(inv_ord, p).val}
            0 <= p && p < n ==>
                0 <= slot(inv_ord, p).val && slot(inv_ord, p).val < n
        invariant forall p: Int :: {slot(inv_ord, p).val}
            0 <= p && p < n ==>
                slot(ord, slot(inv_ord, p).val).val == p
        // count
        invariant forall p: Int :: {slot(ord, p).val}
            0 <= p && p < n ==> slot(count, slot(ord, p).val).val == 1
        invariant forall p: Int :: {slot(count, p).val}
            n <= p && p < maxsize() ==> slot(count, p).val == 1

        invariant i >= 0 
    {
        if (i < n) {
            assert 0 <= slot(inv_ord, i).val && slot(inv_ord, i).val < n
            assert slot(count, slot(ord, slot(inv_ord, i).val).val).val == 1
            assert slot(ord, slot(inv_ord, i).val).val == i
            assert slot(count, i).val == 1
        }   
        assert slot(count, i).val == 1
        i := i + 1
    }
    // End of T_E
    // --
}