import "IArray.vpr"

define seg_sorted(a, l, r)
    forall k1: Int, k2: Int :: {slot(a, k1).val, slot(a, k2).val}
        l <= k1 && k1 < k2 && k2 < r ==> slot(a, k1).val < slot(a, k2).val

define in_range(i, l, r)
    l <= i && i < r

define valid_lr(array, l, r)
    // l and r give indices within which to search the array (both inclusive)
    0 <= l && l < r && r <= len(array)

define good_search(ind, a, x, l, r)
    // if ind != -1, then ind gives correct index for elt x
    ind != -1 ? in_range(ind, l, r) && slot(a, ind).val == x
        // else ind == -1, so x is not in the array
        : forall k: Int :: {slot(a, k).val}
            l <= k && k < r ==> x != slot(a, k).val

method find_x(l: Int, r: Int, x: Int, ind: Int, sup: Int, a: IArray, MAX_N: Int)
    requires access_read(a)
    requires valid_lr(a, l, r)
    requires seg_sorted(a, l, r)
{
    if (x < slot(a, l).val || x > slot(a, r - 1).val) {
        assume ind == -1
    } else {
        if (ind == -1) {
            assume sup >= l
            assume sup < r - 1
            var tmp1: Int := slot(a, sup).val
            var tmp2: Int := slot(a, sup + 1).val
            assume tmp1 < x
            assume x < tmp2
        } else {
            assume ind >= l
            assume ind < r
            assume (slot(a, ind).val == x)
        }
    }
    
    // --
    // END OF T_E, BEGINNING OF T_S
    // --

    var tmp: Int
    assert ind >= l || ind == -1
    assert ind < r
    if (ind != -1) {
        assert slot(a, ind).val == x
    } else {
        tmp := 0
        while (tmp < MAX_N)
            invariant tmp >= 0
            invariant access_read(a) && valid_lr(a, l, r) && seg_sorted(a, l, r)
            invariant good_search(ind, a, x, l, r)
        {
            if (tmp >= l) {
                if (tmp < r) {
                    assert(slot(a, tmp).val != x)
                }
            }
            tmp := tmp + 1
        }
    }
}