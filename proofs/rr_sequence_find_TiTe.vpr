import "IArray.vpr"

// Family of j-indexed monotonically increasing functions over Int
function f(j: Int, s: Int): Int 
  decreases *
  ensures s < result // f increasing for each j
  ensures forall t: Int :: {f(j, t)} s < t ==> result < f(j, t) // f monotonic for each j

define injective(A)
  forall j1: Int, j2: Int :: {A[j1], A[j2]}
    0 <= j1 && j1 < j2 && j2 < |A| ==> A[j1] != A[j2]

define access_arrays(A)
    forall i:Int :: {A[i]}
        0 <= i && i < |A| ==> access(A[i])

define access_perm_arrays(A, p)
    forall i:Int :: {A[i]}
        0 <= i && i < |A| ==> access_perm(A[i], p)

method T_I(s_0: Int, n: Int, m: Int, seq: IArray)
  requires n > 0 && m > 0
  requires access(seq)
  requires len(seq) >= n
{
  var j: Int
  var k: Int
  var fnext: IArray
  fnext := new_array(m, 0)
  var next: IArray
  next := new_array(m, 0)
  
  slot(seq, 0).val := s_0

  // Ghost variables for T_E
  var seq_last: Int
  var prev_k: IArray
  prev_k := new_array(n, 0)
  var prev_j: IArray
  prev_j := new_array(n, 0)
  var fseq: Seq[IArray] := Seq()
 
  j := 0
  while (j < m) 
    invariant 0 <= j && j <= m
    invariant access(fnext)
    invariant access(next)
    invariant forall j1: Int :: {slot(fnext, j1).val} 
      0 <= j1 && j1 < j ==> slot(fnext, j1).val == f(j1, s_0)
    invariant forall j1: Int :: {slot(fnext, j1).val}
      0 <= j1 && j1 < j ==> s_0 < slot(fnext, j1).val
    invariant forall j1: Int :: {slot(next, j1).val} 
      0 <= j1 && j1 < j ==> slot(next, j1).val == 0
    invariant |fseq| == j
    invariant injective(fseq)
    invariant forall j1: Int :: {fseq[j1]} 0 <= j1 && j1 < j ==> access(fseq[j1]) && len(fseq[j1]) == n
    invariant forall j1: Int, k1: Int :: {slot(fseq[j1], k1).val}
      0 <= j1 && j1 < j && 0 <= k1 && k1 < n ==> slot(fseq[j1], k1).val == n
  {
    slot(fnext, j).val := f(j, s_0)
    slot(next, j).val := 0
    // Also initialize ghost variables
    var fseq_j: IArray 
    fseq_j := new_array_distinct_from(n, n, fseq) 
    fseq := fseq ++ Seq(fseq_j)
    j := j + 1
  }

  k := 1
  while (k < n) 
    invariant 0 < k && k <= n
    invariant access(seq)
    invariant access(fnext)
    invariant access(next)
    invariant access(prev_k)
    invariant access(prev_j)
    invariant injective(fseq)
    invariant access_arrays(fseq)
    invariant forall j1: Int :: {slot(next, j1).val} 
      0 <= j1 && j1 < m ==> 0 <= slot(next, j1).val && slot(next, j1).val < k
    invariant forall j1: Int :: {slot(fnext, j1).val, slot(seq, slot(next, j1).val).val} 
      0 <= j1 && j1 < m ==> slot(fnext, j1).val == f(j1, slot(seq, slot(next, j1).val).val)
    invariant forall k1: Int :: {slot(prev_k, k1).val} 0 < k1 && k1 < k ==> 0 <= slot(prev_k, k1).val && slot(prev_k, k1).val < k1
    invariant forall k1: Int :: {slot(prev_j, k1).val} 0 < k1 && k1 < k ==> 0 <= slot(prev_j, k1).val && slot(prev_j, k1).val < m
    invariant forall k1: Int :: {f(slot(prev_j, k1).val, slot(seq, slot(prev_k, k1).val).val)} 
        0 < k1 && k1 < k ==> slot(seq, k1).val == f(slot(prev_j, k1).val, slot(seq, slot(prev_k, k1).val).val)   
    invariant forall k1: Int, k2: Int :: {slot(seq, k1).val, slot(seq, k2).val}
      0 <= k1 && k1 < k2 && k2 < k ==> slot(seq, k1).val < slot(seq, k2).val
    invariant forall j1: Int :: {slot(fnext, j1).val}
      0 <= j1 && j1 < m ==> slot(seq, k-1).val < slot(fnext, j1).val
    invariant forall k1: Int, j1: Int :: {slot(fseq[j1], k1).val} 
      0 <= k1 && k1 < n && 0 <= j1 && j1 < m ==> 0 <= slot(fseq[j1], k1).val
    invariant forall k1: Int, j1: Int :: {slot(next, j1).val,slot(fseq[j1], k1).val} 
        0 <= j1 && j1 < m && slot(next, j1).val <= k1 && k1 < n ==> slot(fseq[j1], k1).val >= n  
    invariant forall k1: Int, j1: Int :: {slot(next, j1).val,slot(fseq[j1], k1).val} 
        0 <= j1 && j1 < m && 0 <= k1 && k1 < slot(next, j1).val && k1 < n ==> slot(fseq[j1], k1).val < k 
    invariant forall k1: Int, j1: Int :: {slot(next, j1).val,slot(seq, slot(fseq[j1], k1).val).val} 
      0 <= j1 && j1 < m && 0 <= k1 && k1 < slot(next, j1).val && k1 < n ==> 
       (f(j1, slot(seq, k1).val) == slot(seq, slot(fseq[j1], k1).val).val) 
    invariant forall k1: Int, j1: Int :: {f(j1, slot(seq, slot(next, j1).val).val),slot(seq, k1).val}
      0 <= k1 && k1 < k && 0 <= j1 && j1 < m ==> f(j1, slot(seq, slot(next, j1).val).val) > slot(seq, k1).val
    invariant s_0 == slot(seq, 0).val
  { 
    slot(seq, k).val := slot(fnext, 0).val
    slot(prev_k, k).val := slot(next, 0).val
    slot(prev_j, k).val := 0

    j := 0;
    while (j < m) 
      invariant 0 <= j && j <= m
      invariant acc(slot(seq, k).val)
      invariant acc(slot(prev_k, k).val)
      invariant acc(slot(prev_j, k).val)
      invariant access_perm(fnext, 1/2)
      invariant access_perm(next, 1/2)
      invariant 0 <= slot(prev_k, k).val && slot(prev_k, k).val < k
      invariant 0 <= slot(prev_j, k).val && slot(prev_j, k).val < m
      invariant slot(seq, k).val == f(slot(prev_j, k).val, slot(seq, slot(prev_k, k).val).val)
      invariant forall j1: Int :: {slot(fnext, j1).val}
         0 <= j1 && j1 < j ==> slot(seq, k).val <= slot(fnext, j1).val
      invariant slot(seq, k-1).val < slot(seq, k).val
    {
      if (slot(seq, k).val > slot(fnext, j).val) {
        slot(seq, k).val := slot(fnext, j).val
        slot(prev_k, k).val := slot(next, j).val
        slot(prev_j, k).val := j
      }
      j := j + 1
    }

    j := 0;
    while (j < m) 
      invariant 0 <= j && j <= m
      invariant access_perm(seq, 1/2)
      invariant access(next)
      invariant access(fnext)
      invariant access_arrays(fseq)
      invariant forall j1: Int :: {slot(next, j1).val} 
        0 <= j1 && j1 < j ==> 0 <= slot(next, j1).val && slot(next, j1).val <= k
      invariant forall j1: Int :: {slot(next, j1).val} 
        j <= j1 && j1 < m ==> 0 <= slot(next, j1).val && slot(next, j1).val < k
      invariant forall j1: Int :: {slot(fnext, j1).val, slot(seq, slot(next, j1).val).val} 
        0 <= j1 && j1 < m ==> slot(fnext, j1).val == f(j1, slot(seq, slot(next, j1).val).val)
      invariant forall j1: Int :: {slot(fnext, j1).val}
         0 <= j1 && j1 < j ==> slot(seq, k).val < slot(fnext, j1).val
      invariant forall j1: Int :: {slot(fnext, j1).val}
         j <= j1 && j1 < m ==> slot(seq, k).val <= slot(fnext, j1).val
      invariant forall k1: Int, j1: Int :: {slot(fseq[j1], k1).val} 
        0 <= k1 && k1 < n && 0 <= j1 && j1 < m ==> 0 <= slot(fseq[j1], k1).val
      invariant forall k1: Int, j1: Int :: {slot(next, j1).val,slot(fseq[j1], k1).val} 
        0 <= j1 && j1 < m && slot(next, j1).val <= k1 && k1 < n ==> slot(fseq[j1], k1).val >= n  
      invariant forall k1: Int, j1: Int :: {slot(next, j1).val,slot(fseq[j1], k1).val} 
        j <= j1 && j1 < m && 0 <= k1 && k1 < slot(next, j1).val ==> slot(fseq[j1], k1).val < k 
      invariant forall k1: Int, j1: Int :: {slot(next, j1).val,slot(fseq[j1], k1).val} 
        0 <= j1 && j1 < j && 0 <= k1 && k1 < slot(next, j1).val && k1 < n ==> slot(fseq[j1], k1).val <= k 
      invariant forall k1: Int, j1: Int :: {slot(seq, slot(fseq[j1], k1).val).val} 
        0 <= j1 && j1 < m && 0 <= k1 && k1 < slot(next, j1).val && k1 < n ==> 
          (f(j1, slot(seq, k1).val) == slot(seq, slot(fseq[j1], k1).val).val) 
      invariant forall k1: Int, j1: Int :: {f(j1, slot(seq, slot(next, j1).val).val),slot(seq, k1).val}
        0 <= k1 && k1 < k && j <= j1 && j1 < m ==> f(j1, slot(seq, slot(next, j1).val).val) > slot(seq, k1).val
      invariant forall k1: Int, j1: Int :: {f(j1, slot(seq, slot(next, j1).val).val),slot(seq, k1).val}
        0 <= k1 && k1 <= k && 0 <= j1 && j1 < j ==> f(j1, slot(seq, slot(next, j1).val).val) > slot(seq, k1).val
{
      if (slot(fnext,j).val == slot(seq, k).val) {
        assert f(j, slot(seq, slot(next, j).val).val) < f(j, slot(seq, slot(next, j).val + 1).val)
        slot(fseq[j],slot(next,j).val).val := k
        slot(next, j).val := slot(next, j).val + 1
        slot(fnext,j).val := f(j, slot(seq, slot(next, j).val).val)
      }
      
      j := j + 1
    }

    k := k + 1
  }

  // Some auxiliary assertions to prove the precondition of T_E
  assert forall k1: Int, j1: Int :: {slot(fseq[j1], k1).val}
    0 <= j1 && j1 < m && slot(next, j1).val <= k1 && k1 < n ==> slot(fseq[j1], k1).val >= n

  assert forall j1: Int :: {slot(next, j1).val} 
    0 <= j1 && j1 < m ==> f(j1, slot(seq, slot(next, j1).val).val) > slot(seq, n-1).val

  assert forall k1: Int, j1: Int :: 
     {slot(fseq[j1], k1).val} 0 <= k1 && k1 < n && 0 <= j1 && j1 < m ==> 
       slot(fseq[j1], k1).val >= n ==> k1 >= slot(next, j1).val

  seq_last := slot(seq, n-1).val

  T_E(s_0, n, m, seq, seq_last, prev_k, prev_j, fseq)
}



// The precondition of T_E is established by T_I above
method T_E(s_0: Int, n: Int, m: Int, seq: IArray, seq_last: Int, prev_k: IArray, prev_j: IArray, fseq: Seq[IArray])
  requires n > 0
  requires access_perm(seq, 1/2)
  requires len(seq) >= n
  requires access_perm(prev_j, 1/2)
  requires len(prev_j) >= n
  requires access_perm(prev_k, 1/2)
  requires len(prev_k) >= n
  requires injective(fseq)
  requires access_perm_arrays(fseq, 1/2)
  requires |fseq| == m
  requires forall j1: Int :: {fseq[j1]} 0 <= j1 && j1 < m ==> len(fseq[j1]) >= n
  requires seq_last == slot(seq, n-1).val
  requires s_0 == slot(seq, 0).val
  requires forall k1: Int :: {slot(prev_k, k1).val} 0 < k1 && k1 < n ==> 0 <= slot(prev_k, k1).val && slot(prev_k, k1).val < k1
  requires forall k1: Int :: {slot(prev_j, k1).val} 0 < k1 && k1 < n ==> 0 <= slot(prev_j, k1).val && slot(prev_j, k1).val < m
  requires forall k1: Int :: {f(slot(prev_j, k1).val, slot(seq, slot(prev_k, k1).val).val)} 
        0 < k1 && k1 < n ==> slot(seq, k1).val == f(slot(prev_j, k1).val, slot(seq, slot(prev_k, k1).val).val) 
  requires forall k1: Int, k2: Int :: {slot(seq, k1).val, slot(seq, k2).val}
      0 <= k1 && k1 < k2 && k2 < n ==> slot(seq, k1).val < slot(seq, k2).val
  requires forall k1: Int, j1: Int :: 
      {slot(fseq[j1], k1).val} 0 <= k1 && k1 < n && 0 <= j1 && j1 < m ==> 
        0 <= slot(fseq[j1], k1).val
  requires forall k1: Int, j1: Int :: 
      {slot(fseq[j1], k1).val} 0 <= k1 && k1 < n && 0 <= j1 && j1 < m ==> 
        slot(fseq[j1], k1).val >= n ==> f(j1, slot(seq, k1).val) > seq_last 
  requires forall k1: Int, j1: Int :: 
      {slot(seq, slot(fseq[j1], k1).val).val} 0 <= k1 && k1 < n && 0 <= j1 && j1 < m ==> 
        slot(fseq[j1], k1).val < n ==> (f(j1, slot(seq, k1).val) == slot(seq, slot(fseq[j1], k1).val).val) 
{
  // T_E
  assert seq_last == slot(seq, n-1).val
  assert s_0 == slot(seq, 0).val

  var j: Int := 0
  while (j < m)
    invariant 0 <= j && j <= m
    invariant access_perm(seq, 1/3)
    invariant forall j1: Int :: {fseq[j1]} 0 <= j1 && j1 < m ==> access_perm(fseq[j1], 1/3)
  {
    var fseq_j_k: Int := slot(fseq[j], 0).val
    assert fseq_j_k >= 0
    if (fseq_j_k >= n) {
      assert f(j, s_0) > seq_last
    } else {
      assert f(j, s_0) == slot(seq, fseq_j_k).val
    }
    j := j + 1
  }


  var k : Int := 1
  while (k < n) 
    invariant 0 < k && k <= n
    invariant access_perm(seq, 1/3)
    invariant access_perm(prev_k, 1/3)
    invariant access_perm(prev_j, 1/3)
    invariant access_perm_arrays(fseq, 1/3)
    invariant |fseq| == m
  {
    var s_k: Int := slot(seq, k).val
    
    assert slot(seq, k-1).val < s_k
    
    var p_k: Int := slot(prev_k, k).val
    assert 0 <= slot(prev_k, k).val && slot(prev_k, k).val < k
    assert 0 <= p_k && p_k < k

    var s_p_k: Int := slot(seq, p_k).val
    var p_j: Int := slot(prev_j, k).val

    j := 0
    var found: Int := 0
    while (j < m)
      invariant 0 <= j && j <= m
      invariant access_perm(seq, 1/4)
      invariant access_perm(prev_j, 1/4)
      invariant access_perm(prev_k, 1/4)
      invariant access_perm_arrays(fseq, 1/4)
      invariant j > p_j ==> found != 0
    {     
      if (f(j, s_p_k) == s_k) {
        found := 1
      }
      var fseq_j_k: Int := slot(fseq[j], k).val
      assert fseq_j_k >= 0
      if (fseq_j_k >= n) {
        assert f(j, s_k) > seq_last
      } else {
        assert f(j, s_k) == slot(seq, fseq_j_k).val
      }
      j := j + 1
    }
    assert found != 0

    k := k + 1
  }

}
