import "IArray.vpr"

method find_min(A: IArray, n: Int, MAX_N: Int)
    requires access_read(A)
    requires MAX_N > 0
    requires len(A) == MAX_N
    requires n <= len(A) && n > 0
{
    var min: Int := slot(A,0).val 
    var p: Int := 0 // for establishing invariants
    
    var i:Int
    i := 0
    while(i < MAX_N)
        invariant 0 <= i && i <= MAX_N
        invariant access_read(A)
        invariant forall j:Int ::
            valid_index(A,j) && j < i && j < n ==> min <= slot(A,j).val
        invariant 0 <= p && p < n && slot(A,p).val == min
    {
        if(i < n){
            if(slot(A,i).val < min){
                min := slot(A,i).val
                p := i
            }
        }
        i := i+1
    }
    
    var B: IArray
    inhale access(B)
    assume len(B) == MAX_N

    i := 0
    while(i < MAX_N)
        invariant 0 <= i && i <= MAX_N
        invariant access_perm(A, 1/6)
        invariant access(B)
        invariant forall j: Int ::
            valid_index(A,j) && j < n ==> min <= slot(A,j).val
        invariant forall j: Int ::
            valid_index(A,j) && j < i && j < n && slot(A,j).val == min ==>
            slot(B,j).val == 1
        invariant forall j: Int ::
            valid_index(A,j) && j < i && j < n && slot(A,j).val != min ==>
            slot(B,j).val == 0
        invariant 0 <= p && p < n && slot(A,p).val == min
    {
        if(i < n){
            if(slot(A,i).val == min){
                slot(B,i).val := 1
            } else {
                slot(B,i).val := 0
            }
        }
        i := i+1
    }

    // --
    // END OF T_I, BEGINNING OF T_E
    // --

    var found: Int := 0
    i := 0
    while(i < MAX_N)
        invariant 0 <= i && i <= MAX_N
        invariant access_perm(A, 1/6)
        invariant access(B)
        invariant forall j: Int ::
            valid_index(A, j) && j < n ==> min <= slot(A, j).val
        invariant forall j: Int ::
            valid_index(A, j) && j < n && slot(A, j).val == min ==>
            slot(B, j).val == 1
        invariant forall j: Int ::
            valid_index(A, j) && j < n && slot(A, j).val != min ==>
            slot(B, j).val == 0
        invariant 0 <= p && p < n && slot(A, p).val == min
        invariant i > p ==> found == 1
    {
        if(i < n){
            assert min <= slot(A, i).val
            if(slot(A, i).val == min){
                assert slot(B, i).val == 1;
                found := 1;
            } else {
                assert slot(B, i).val == 0;
            }
        }
        i := i+1
    }

    assert found != 0
}